name: Universal Framework CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  MINIMUM_COVERAGE: "95"

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code formatting validation (Black)
        run: |
          black --check --diff src/ tests/
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting validation failed. Run: black src/ tests/"
            exit 1
          fi
          echo "✅ Code formatting validation passed"

      - name: Linting validation (ruff)
        run: |
          ruff check src/ tests/ --no-fix --output-format=github
          if [ $? -ne 0 ]; then
            echo "❌ Linting validation failed. Run: ruff check src/ tests/ --fix"
            exit 1
          fi
          echo "✅ Linting validation passed"

      - name: Type checking validation (mypy)
        run: |
          mypy src/universal_framework/ --strict --show-error-codes --pretty
          if [ $? -ne 0 ]; then
            echo "❌ Type checking validation failed. Fix type errors above"
            exit 1
          fi
          echo "✅ Type checking validation passed"

      - name: Python 3.11+ compatibility validation
        run: |
          python scripts/ci/validate_python311_compatibility.py
          if [ $? -ne 0 ]; then
            echo "❌ Python 3.11+ compatibility validation failed"
            exit 1
          fi
          echo "✅ Python 3.11+ compatibility validation passed"

  test-suite:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gates

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run comprehensive test suite
        env:
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -v \
            --cov=src/universal_framework \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=${{ env.MINIMUM_COVERAGE }} \
            --junit-xml=test-results.xml \
            --maxfail=5 \
            -n auto
          if [ $? -ne 0 ]; then
            echo "❌ Test suite failed or coverage below ${{ env.MINIMUM_COVERAGE }}%"
            exit 1
          fi

      - name: Validate coverage threshold
        run: |
          coverage report --fail-under=${{ env.MINIMUM_COVERAGE }}
          if [ $? -ne 0 ]; then
            echo "❌ Code coverage below required threshold: ${{ env.MINIMUM_COVERAGE }}%"
            echo "Please add tests to meet enterprise coverage requirements"
            exit 1
          fi
          echo "✅ Code coverage meets enterprise requirements (≥${{ env.MINIMUM_COVERAGE }}%)"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  compliance-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gates

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Enterprise compliance validation
        run: |
          python scripts/ci/validate_compliance.py
          if [ $? -ne 0 ]; then
            echo "❌ Enterprise compliance validation failed"
            exit 1
          fi
          echo "✅ Enterprise compliance validation passed"

      - name: Security scanning (bandit)
        run: |
          bandit -r src/ -f json -o security-report.json
          bandit -r src/ --severity-level medium

      - name: Vulnerability scanning (safety)
        run: |
          safety check --json --output vulnerability-report.json
          safety check

      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-reports
          path: |
            security-report.json
            vulnerability-report.json

  docker-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test-suite, compliance-validation]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build production Docker image
        run: |
          docker build -t universal-framework:ci-test .
          if [ $? -ne 0 ]; then
            echo "❌ Production Docker build failed"
            exit 1
          fi
          echo "✅ Production Docker build successful"

      - name: Build development Docker image
        run: |
          docker build -f Dockerfile.dev -t universal-framework:ci-dev .
          if [ $? -ne 0 ]; then
            echo "❌ Development Docker build failed"
            exit 1
          fi
          echo "✅ Development Docker build successful"

      - name: Container health validation
        run: |
          docker run -d --name test-container -p 8000:8000 universal-framework:ci-test
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container
          docker rm test-container
          echo "✅ Container health validation passed"

  performance-baseline:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: docker-validation
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Performance baseline validation
        run: |
          python scripts/ci/performance_check.py
          if [ $? -ne 0 ]; then
            echo "❌ Performance baseline validation failed (<500ms requirement)"
            exit 1
          fi
          echo "✅ Performance baseline validation passed"
