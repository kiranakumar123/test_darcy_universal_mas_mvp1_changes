# Universal Framework Environment Configuration Template
# Copy to .env and customize for your environment

# Environment
ENVIRONMENT=development
DEBUG=true

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4.1-nano
OPENAI_ORGANIZATION=org-your-organization-id-here
OPENAI_PROJECT=proj-your-project-id-here

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# Authentication
JWT_SECRET_KEY=your-secret-key-here
JWT_ALGORITHM=HS256
JWT_EXPIRE_MINUTES=1440

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json

# LangSmith Configuration (optional)
LANGCHAIN_TRACING_V2=false
LANGCHAIN_API_KEY=

# OpenTelemetry OTLP Configuration (optional)
# Enable tech-agnostic observability backend routing
OTEL_EXPORTER_OTLP_ENDPOINT=
OTEL_EXPORTER_OTLP_HEADERS=
OTEL_SERVICE_NAME=universal-framework
OTEL_SERVICE_VERSION=3.1.0

# Common OTLP Backend Examples:
# AWS CloudWatch:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://logs.us-east-1.amazonaws.com/v1/traces
# OTEL_EXPORTER_OTLP_HEADERS=authorization=Basic <base64-encoded-credentials>

# Datadog:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://http-intake.logs.datadoghq.com/v1/input/<API_KEY>
# OTEL_EXPORTER_OTLP_HEADERS=DD-API-KEY=<api-key>

# Splunk:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.<realm>.signalfx.com/v2/trace/otlp
# OTEL_EXPORTER_OTLP_HEADERS=X-SF-TOKEN=<access-token>

# New Relic:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp.nr-data.net:4318/v1/traces
# OTEL_EXPORTER_OTLP_HEADERS=api-key=<license-key>

# Elastic/Elasticsearch:
# OTEL_EXPORTER_OTLP_ENDPOINT=https://your-deployment.es.io:8200/v1/traces
# OTEL_EXPORTER_OTLP_HEADERS=Authorization=Bearer <token>

# BoundaryML Configuration (optional)
BOUNDARYML_API_KEY=

# Database Configuration
DATABASE_URL=sqlite:///./universal_framework.db

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
